---
import { getCollection } from 'astro:content';
import DocPageLayout from '../../layouts/DocPage.astro';

import settings from '@base/settings.json';
import { generateSidebarDSByUserOrder } from '@utils/generateSidebarDS';

export interface DocsLink {
  category: string;
  title: string;
  slug: string;
}

export async function getStaticPaths() {
  const docsEntries = await getCollection('docs');
  const orderBy = settings.docs.menu.order;
  const sidebarSorted = generateSidebarDSByUserOrder(docsEntries, orderBy);

  // Flatten the sidebarSorted structure
  const flatSidebar = sidebarSorted.reduce((acc: DocsLink[], category) => {
    return acc.concat(
      category.list.map((item) => ({
        category: category.category,
        slug:
          category.slug === item.slug
            ? `${item.slug}`
            : `${category.slug}/${item.slug}`,
        title: item.title,
      })),
    );
  }, []);

  return docsEntries.map((entry) => {
    const currentIndex = flatSidebar.findIndex(
      (item) => item.slug === entry.slug,
    );
    // Determine previous and next items
    const prevItem = currentIndex > 0 ? flatSidebar[currentIndex - 1] : null;
    const nextItem =
      currentIndex < flatSidebar.length - 1
        ? flatSidebar[currentIndex + 1]
        : null;

    return {
      params: { slug: entry.slug },
      props: { entry, prevItem, nextItem },
    };
  });
}

const { entry, prevItem, nextItem } = Astro.props;
const { Content, headings } = await entry.render();
---

<DocPageLayout
  title={entry.data.title}
  description={entry.data.desc || ''}
  headings={headings}
  prevItem={prevItem}
  nextItem={nextItem}
>
  <Content />
</DocPageLayout>
